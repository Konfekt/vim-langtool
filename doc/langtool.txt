              *vim-langtool*            *langtool*
===========================================================================
Intro ~

This Vim plug-in collects all grammar mistakes (of the currently open file)
found by LanguageTool into the quickfix (or local) list from which they can
be jumped to.

Setup ~

Download and unpack LanguageTool, say into the folder ~/LanguageTool, and add
to your vimrc the line

>
  let g:langtool_jar = '~/LanguageTool/languagetool-commandline.jar'
<

where the right-hand side, ~/LanguageTool/languagetool-commandline.jar, is the
path of the file languagetool-commandline.jar.

Usage ~

The command
>
  :LangTool
<
populates the location-list with all grammar mistakes found by LanguageTool.
The (location-list) window that lists them can then be opened by `:lwindow`
and they can be jumped to by `:lN` respectively `:lp`. (Have a look at
vim-unimpaired to use convenient mappings instead).

To run LanguageTool the in the background by Vim's job feature, instead of
:lmake, it will use a custom :Make command such as

- that of vim-dispatch or
- with AsyncRun installed (see also the section Hints below),
>
  command! -bang -nargs=* -complete=file -bar Make AsyncRun<bang> -auto=make -program=make
<

The (quickfix) window that lists the grammar mistakes can then be opened by
`:cwindow` and they can be jumped to by `:cN` respectively `:cp`.

To automatically open the location-list window after LangTool, add 'autocmd
QuickFixCmdPost lmake lwindow' to your vimrc, respectively 'autocmd
QuickFixCmdPost make cwindow' if you use one of those plug-ins. To
automatically run LangTool after saving the modifications to a text, mail or
markdown file, add to your vimrc:
>
  autocmd FileType text,mail,markdown autocmd BufWrite <buffer=abuf> LangTool
<

Configuration ~

Command-line parameters can be passed to LanguageTool can be passed by the
global variable g:langtool_parameters and the buffer-local variable
b:langtool_parameters. By default
>
  let g:langtool_parameters = ''
<
and
>
  let b:langtool_parameters = '--autoDetect'
<

For example, mother tongue can be set and (categories of) rules enabled and
disabled by
>
  let s:enablecategories = 'CREATIVE_WRITING,WIKIPEDIA' .
  let s:enable = 'PASSIVE_VOICE,TIRED_INTENSIFIERS'
  let s:disable = 'REPEATED_WORDS,REPEATED_WORDS_3X'

  let g:langtool_parameters = ' --mothertongue de' .
        \ ' --enablecategories ' . s:enablecategories .
        \ ' --enable ' . s:enable .
        \ ' --disable ' . s:disable
<
to your vimrc.
To set the language that LanguageTool will use to that used by Vim to
spellcheck, enter
>
    let b:langtool_parameters = '--language ' . &l:spelllang
<
in the command line.

Hints ~

If you use AsyncRun, add let g:asyncrun_trim = 1 to your vimrc to avoid
empty lines in the quickfix list. The other options listed at
https://github.com/skywind3000/asyncrun.vim/wiki/Options, such as
g:asyncrun_save might be of interest.

Related Plug-ins ~

This Vim plug-in is simpler than vim-LanguageTool and vim-grammarous. In
particular, it lets Vim parse the LanguageTool output to stdout via an
appropriate value of &errorformat; see :help errorformat. (Whereas both
plug-ins implement their proper parser for the deprecated XML output
format of LanguageTool.)


vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl
